# ---------------------------------------------------------------------------------------------- 
# ** AUTO-GENERATED FILE ** CHANGES WILL BE OVERWRITTEN ** 
# Converted by Belvedere 
# http://github.com/magnayn/belvedere 
# Mon Oct 21 17:09:24 BST 2019
# ---------------------------------------------------------------------------------------------- 

openapi: 3.0.2
security:
- APIAuthorizer: []
paths:
  /test:
    post:
      description: send Something
      operationId: postTest
      responses:
        200:
          description: OK
      security:
      - APIAuthorizer: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:549321807852:function:lambda_interop_vacancyapi/invocations
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "## See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ## This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
            \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
            \ #set($params = $allParams.get($type))\n\"$type\" : {\n #foreach($paramName\
            \ in $params.keySet())\n \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
            \n #if($foreach.hasNext),#end\n #end\n}\n #if($foreach.hasNext),#end\n\
            #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n #if($foreach.hasNext),#end\n\
            #end\n},\n\"context\" : {\n \"account-id\" : \"$context.identity.accountId\"\
            ,\n \"api-id\" : \"$context.apiId\",\n \"api-key\" : \"$context.identity.apiKey\"\
            ,\n \"authorizer-principal-id\" : \"$context.authorizer.principalId\"\
            ,\n \"caller\" : \"$context.identity.caller\",\n \"http-method\" : \"\
            $context.httpMethod\",\n \"stage\" : \"$context.stage\",\n \"source-ip\"\
            \ : \"$context.identity.sourceIp\",\n \"user\" : \"$context.identity.user\"\
            ,\n \"user-agent\" : \"$context.identity.userAgent\",\n \"user-arn\" :\
            \ \"$context.identity.userArn\",\n \"request-id\" : \"$context.requestId\"\
            ,\n \"resource-id\" : \"$context.resourceId\",\n \"resource-path\" : \"\
            $context.resourcePath\"\n }\n}\n        "
        passthroughBehavior: when_no_templates
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws
components:
  securitySchemes:
    APIAuthorizer:
      type: apiKey
      name: AuthorizationToken
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:529795854321:function:lambda_interop_auth/invocations
        authorizerCredentials: arn:aws:iam::529795854321:role/iam_for_lambda
        authorizerResultTtlInSeconds: 300
        type: token

